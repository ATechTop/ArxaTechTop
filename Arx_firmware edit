#include <SoftwareSerial.h>

/* The following two libraries are included with the Arduino IDE  */
#include <SPI.h>       // supports SPI serial communication and defines analog pins
#include <EEPROM.h>
#include <Wire.h>      // I2C support (currently not implemented)
//#include <L3G4200D.h>  // 3-axis Gyro (currently not implemented)

#define FALSE 0        // LOW
#define TRUE  1        // HIGH

/**************** Robot Configuration **************
 * Set Rover, Pinouts, Connection Type, and Pinger *
 ***************************************************/
#include "pinouts_robot.h"    // replace with your pinout

#define Rosco FALSE
#define PaperBot FALSE
#define bluetooth TRUE       // Leonardo class rovers - Serial used for USB, Serial1 for bluetooth (i.e., USART)
#define pinger FALSE          // FALSE if no ultrasonic sensor is used.
#define debug  FALSE
#define atechtop TRUE


#define BUTTON 5 //for emergency button


//Goes in Arxfirmware//
    unsigned long Wait = 4000;
    unsigned long tempTime = millis() + Wait; //delay for temperature sensor
    unsigned long accelTime = millis() + Wait + 1000; //delay for accelerometer
    unsigned long boTime = millis() + Wait + 2000; //delay for Blood Oximiter reading

//Accelerometer Initial Variables
     int down = 0;
     long lasttime = 0; 
     long newtime = 0;
     long timedown = 0;


//Pulse Sensor Variables
    //  VARIABLES
      int pulsePin = A5;                 // Pulse Sensor purple wire connected to analog pin 0
      int blinkPin = 13;                // pin to blink led at each beat
      
    //Variables are volatile because they are used during the interrupt service routine.
      volatile int BPM;                   // used to hold the pulse rate
      volatile int Signal;                // holds the incoming raw data
      volatile int IBI = 600;             // holds the time between beats, the Inter-Beat Interval
      volatile boolean Pulse = false;     // true when pulse wave is high, false when it's low
      volatile boolean QS = false;        // becomes true when Arduoino finds a beat.
    
//Blood Oximeter Variables and Constants
    volatile unsigned long cnt = 0;
    volatile unsigned long redcnt = 0;
    volatile unsigned long infcnt = 0;
    volatile unsigned long lwrcnt = 0;
    unsigned long oldcnt = 0;
    unsigned long t = 0;
    unsigned long last;
    unsigned long oxy;
    int redLED = 4;
    int infLED = 3;
 
/**************** Global Variables ****************
 * source: Found in CommunicationRobotPilot Folder  *
 ***************************************************/
const int16_t FLAG = -128;  // value returned by readFuelGauge when called
                            // by sendDataon undervoltage condition
// Timer Variable
unsigned long timer;        // unsigned 32-bit

boolean collisionDetection = FALSE;
 
 SoftwareSerial Serial1(0,1);//connect rx tx
 
void setup(){

  Serial.begin(57600);
  aTechTopSetup();
  interruptSetup();
  #if bluetooth
  Serial1.begin(57600);
  #endif
  
 
  timer = millis();        // telemetry  
  // init_servos();        // Rosco uses servos
  
  pinMode(led, OUTPUT);    // initialize LED indicator as an output.
 
  // Configure motorshield and insure motors are off. 
  // If included in design, turn off collisionDetection
  setup_TB6612FNG();    // sparkfun_TB6612FNG
}

void loop(){
  
  #if bluetooth
  if(Serial1.available() ) commandDecoder();  // note: Leonardo does not support serialEvent() handler
  #else
  if(Serial.available() ) commandDecoder();
  #endif
  
  //------------------------------------------------------------------------------------------------------------
  // METHODS
  //------------------------------------------------------------------------------------------------------------
      tempTime = tempMonitor(Wait, tempTime);      //Calling temperature sensor method
  //  warningButton();                             //Calling warning button method
  //  accelTime = accelMonitor(Wait, accelTime);   //Calling the accelerometer method
  //  pulseMonitor();                              //Calling pulse sensor method
  //  boTime = bloodOxMonitor(Wait, boTime);       //Calling Blood Oximeter method

  // future: replace with watchdog timer interrupt  ****
  
  if (millis() > getNextPing()){   
    sendWordPacket(EMERGENCY_ID,WATCHDOG_TIMEOUT);
    
    #if bluetooth                                // if packet sent over USART=>bluetooth,  
      Serial.print("Emergency exception 0x0");   // send duplicate data as text to
      Serial.println(WATCHDOG_TIMEOUT,HEX);      // USB=>Arduino IDE Serial Monitor.
    #endif 
    
    updateNextPing();

  }
  
  
  sendData(); // Call to send Data for Control Panel Feedback

  // If using a Pinger detect a collision
  #if pinger == TRUE
      if (collisionDetection){
        if (checkSonar()) {
          // insure motors are off and turn off collisionDetection
          stopMotors();
          collisionDetection = FALSE;   // rover is not moving
          // send Emergency Stop message
        }
      }
  #endif
  
}  // end of loop
